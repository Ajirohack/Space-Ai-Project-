!function(){try{var e="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{},n=(new e.Error).stack;n&&(e._sentryDebugIds=e._sentryDebugIds||{},e._sentryDebugIds[n]="7bb2f7b4-14d6-488f-9a02-91adf97f29ef",e._sentryDebugIdIdentifier="sentry-dbid-7bb2f7b4-14d6-488f-9a02-91adf97f29ef")}catch(e){}}();"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6223],{86806:function(e,n,t){t.d(n,{Kh:function(){return m},NK:function(){return g},OM:function(){return y},Wy:function(){return f},Yb:function(){return p},bQ:function(){return v},kl:function(){return _},r4:function(){return h},rg:function(){return d}});var a=t(12832),r=t(6494),o=t.n(r),i=t(52983),s=t(321),l=t(22441),c=t(53674),u=t(76073);function d(e,n){return Array.isArray(n)?o()(n.map(n=>{let[t,a]=n.split(":");if(t&&a)return{table:e,column:t,ascending:"asc"===a}})):[]}function m(e){return e.map(e=>"".concat(e.column,":").concat(e.ascending?"asc":"desc"))}function p(e){return Array.isArray(e)?e.map(e=>{let[n,t,...a]=e.split(":"),r=a.join(":"),o=c.o.find(e=>e.abbrev===t);if(n&&t&&o)return{column:n,operator:o.value,value:r||""}}).filter(e=>void 0!==e):[]}function f(e){return e.map(e=>{let n=c.o.find(n=>n.value===e.operator);return"".concat(e.column,":").concat(null==n?void 0:n.abbrev,":").concat(e.value)})}function g(e){let n=e.columns,t=(0,s.N3)(e)?e.primary_keys:[],a=(0,s.N3)(e)?e.relationships:[],r=n.map(e=>{let n={position:e.ordinal_position,name:e.name,defaultValue:e.default_value,dataType:e.data_type,format:e.format,isPrimaryKey:!1,isIdentity:e.is_identity,isGeneratable:"BY DEFAULT"==e.identity_generation,isNullable:e.is_nullable,isUpdatable:e.is_updatable,enum:e.enums,comment:e.comment,foreignKey:{targetTableSchema:null,targetTableName:null,targetColumnName:null,deletionAction:void 0,updateAction:void 0}},r=t.find(n=>n.name==e.name);n.isPrimaryKey=!!r;let o=a.find(n=>n.source_schema===e.schema&&n.source_table_name===e.table&&n.source_column_name===e.name);return o&&(n.foreignKey.targetTableSchema=o.target_table_schema,n.foreignKey.targetTableName=o.target_table_name,n.foreignKey.targetColumnName=o.target_column_name,n.foreignKey.deletionAction=o.deletion_action,n.foreignKey.updateAction=o.update_action),n});return{id:e.id,name:e.name,comment:e.comment,schema:e.schema,columns:r,estimateRowCount:(0,s.N3)(e)?e.live_rows_estimate:0}}function b(e,n){return"".concat(e,"_").concat(n)}function h(e,n,t){let a=b(u.E_,e),r=localStorage.getItem(a);if(r)return JSON.parse(r)[t&&"public"!=t?"".concat(t,".").concat(n):n]}function _(e){let n,{projectRef:t,tableName:a,schema:r,gridColumns:o,sorts:i,filters:s}=e,l=b(u.E_,t),c=localStorage.getItem(l),d=r&&"public"!=r?"".concat(r,".").concat(a):a,m={...void 0!==o&&{gridColumns:o},...void 0!==i&&{sorts:i},...void 0!==s&&{filters:s}};if(c){let e=(n=JSON.parse(c))[d];n={...n,[d]:{...e,...m}}}else n={[d]:m};localStorage.setItem(l,JSON.stringify(n))}let y=(0,a.Z)(_,500);function v(e){let{projectRef:n,table:t}=e,[a,r]=(0,l.x)({arrayKeys:["sort","filter"]});(0,i.useEffect)(()=>{let e;if(!n||!t)return;let a=new URLSearchParams(window.location.search),o=h(n,t.name,t.schema);a.getAll("sort").length<=0&&(null==o?void 0:o.sorts)&&(e={...e,sort:o.sorts}),a.getAll("filter").length<=0&&(null==o?void 0:o.filters)&&(e={...e,filter:o.filters}),e&&r(n=>({...n,...e}))},[n,t])}},53674:function(e,n,t){t.d(n,{o:function(){return a}});let a=[{value:"=",label:"equals",preLabel:"[ = ]",abbrev:"eq"},{value:"<>",label:"not equal",preLabel:"[ <> ]",abbrev:"neq"},{value:">",label:"greater than",preLabel:"[ > ]",abbrev:"gt"},{value:"<",label:"less than",preLabel:"[ < ]",abbrev:"lt"},{value:">=",label:"greater than or equal",preLabel:"[ >= ]",abbrev:"gte"},{value:"<=",label:"less than or equal",preLabel:"[ <= ]",abbrev:"lte"},{value:"~~",label:"like operator",preLabel:"[ ~~ ]",abbrev:"like"},{value:"~~*",label:"ilike operator",preLabel:"[ ~~* ]",abbrev:"ilike"},{value:"in",label:"one of a list of values",preLabel:"[ in ]",abbrev:"in"},{value:"is",label:"checking for (null,not null,true,false)",preLabel:"[ is ]",abbrev:"is"}]},76073:function(e,n,t){t.d(n,{E_:function(){return r},W:function(){return o},mr:function(){return a},uZ:function(){return i}});let a=100,r="supabase_grid",o="supabase-grid-select-row",i="supabase-grid-add-column"},80711:function(e,n,t){t.d(n,{II:function(){return u},Kp:function(){return f},LT:function(){return _},N8:function(){return w},Pm:function(){return E},VO:function(){return b},kO:function(){return m},nL:function(){return v},nr:function(){return l},om:function(){return i},v3:function(){return r},yM:function(){return q}});let a=["smallint","integer","bigint","decimal","numeric","real","double precision","serial","bigserial","int2","int4","int8","float4","float8","smallserial","serial2","serial4","serial8"];function r(e){return a.indexOf(e.toLowerCase())>-1}let o=["json","jsonb","array"];function i(e){return o.indexOf(e.toLowerCase())>-1}let s=["array"];function l(e){return s.indexOf(e.toLowerCase())>-1}let c=["uuid","text","character varying"];function u(e){return c.indexOf(e.toLowerCase())>-1}let d=["citext"];function m(e){return d.indexOf(e.toLowerCase())>-1}let p=["timestamp","timestamptz"];function f(e){return p.indexOf(e.toLowerCase())>-1}let g=["date"];function b(e){return g.indexOf(e.toLowerCase())>-1}let h=["time","timetz"];function _(e){return h.indexOf(e.toLowerCase())>-1}let y=["boolean","bool"];function v(e){return y.indexOf(e.toLowerCase())>-1}let x=["user-defined"];function w(e){return x.indexOf(e.toLowerCase())>-1}let j=["bytea"];function q(e){return j.indexOf(e.toLowerCase())>-1}function E(e){var n;let{targetTableSchema:t,targetTableName:a,targetColumnName:r}=null!==(n=null==e?void 0:e.foreignKey)&&void 0!==n?n:{};return!!t&&!!a&&!!r}},84789:function(e,n,t){t.d(n,{LW:function(){return d},bn:function(){return g}});var a=t(36457),r=t(64618),o=t(34549),i=t(15538),s=t.n(i),l=t(89089),c=t(94198),u=t(36337);let d="pgmq_public",m=s()("\ncreate schema if not exists ".concat(d,";\ngrant usage on schema ").concat(d," to postgres, anon, authenticated, service_role;\n\ncreate or replace function ").concat(d,".pop(\n    queue_name text\n)\n  returns setof pgmq.message_record\n  language plpgsql\n  set search_path = ''\nas $$\nbegin\n    return query\n    select *\n    from pgmq.pop(\n        queue_name := queue_name\n    );\nend;\n$$;\n\ncomment on function ").concat(d,".pop(queue_name text) is 'Retrieves and locks the next message from the specified queue.';\n\n\ncreate or replace function ").concat(d,".send(\n    queue_name text,\n    message jsonb,\n    sleep_seconds integer default 0  -- renamed from 'delay'\n)\n  returns setof bigint\n  language plpgsql\n  set search_path = ''\nas $$\nbegin\n    return query\n    select *\n    from pgmq.send(\n        queue_name := queue_name,\n        msg := message,\n        delay := sleep_seconds\n    );\nend;\n$$;\n\ncomment on function ").concat(d,".send(queue_name text, message jsonb, sleep_seconds integer) is 'Sends a message to the specified queue, optionally delaying its availability by a number of seconds.';\n\n\ncreate or replace function ").concat(d,".send_batch(\n    queue_name text,\n    messages jsonb[],\n    sleep_seconds integer default 0  -- renamed from 'delay'\n)\n  returns setof bigint\n  language plpgsql\n  set search_path = ''\nas $$\nbegin\n    return query\n    select *\n    from pgmq.send_batch(\n        queue_name := queue_name,\n        msgs := messages,\n        delay := sleep_seconds\n    );\nend;\n$$;\n\ncomment on function ").concat(d,".send_batch(queue_name text, messages jsonb[], sleep_seconds integer) is 'Sends a batch of messages to the specified queue, optionally delaying their availability by a number of seconds.';\n\n\ncreate or replace function ").concat(d,".archive(\n    queue_name text,\n    message_id bigint\n)\n  returns boolean\n  language plpgsql\n  set search_path = ''\nas $$\nbegin\n    return\n    pgmq.archive(\n        queue_name := queue_name,\n        msg_id := message_id\n    );\nend;\n$$;\n\ncomment on function ").concat(d,".archive(queue_name text, message_id bigint) is 'Archives a message by moving it from the queue to a permanent archive.';\n\n\ncreate or replace function ").concat(d,".delete(\n    queue_name text,\n    message_id bigint\n)\n  returns boolean\n  language plpgsql\n  set search_path = ''\nas $$\nbegin\n    return\n    pgmq.delete(\n        queue_name := queue_name,\n        msg_id := message_id\n    );\nend;\n$$;\n\ncomment on function ").concat(d,".delete(queue_name text, message_id bigint) is 'Permanently deletes a message from the specified queue.';\n\ncreate or replace function ").concat(d,".read(\n    queue_name text,\n    sleep_seconds integer,\n    n integer\n)\n  returns setof pgmq.message_record\n  language plpgsql\n  set search_path = ''\nas $$\nbegin\n    return query\n    select *\n    from pgmq.read(\n        queue_name := queue_name,\n        vt := sleep_seconds,\n        qty := n\n    );\nend;\n$$;\n\ncomment on function ").concat(d,'.read(queue_name text, sleep_seconds integer, n integer) is \'Reads up to "n" messages from the specified queue with an optional "sleep_seconds" (visibility timeout).\';\n\n-- Grant execute permissions on wrapper functions to roles\ngrant execute on function ').concat(d,".pop(text) to postgres, service_role, anon, authenticated;\ngrant execute on function pgmq.pop(text) to postgres, service_role, anon, authenticated;\n\ngrant execute on function ").concat(d,".send(text, jsonb, integer) to postgres, service_role, anon, authenticated;\ngrant execute on function pgmq.send(text, jsonb, integer) to postgres, service_role, anon, authenticated;\n\ngrant execute on function ").concat(d,".send_batch(text, jsonb[], integer) to postgres, service_role, anon, authenticated;\ngrant execute on function pgmq.send_batch(text, jsonb[], integer) to postgres, service_role, anon, authenticated;\n\ngrant execute on function ").concat(d,".archive(text, bigint) to postgres, service_role, anon, authenticated;\ngrant execute on function pgmq.archive(text, bigint) to postgres, service_role, anon, authenticated;\n\ngrant execute on function ").concat(d,".delete(text, bigint) to postgres, service_role, anon, authenticated;\ngrant execute on function pgmq.delete(text, bigint) to postgres, service_role, anon, authenticated;\n\ngrant execute on function ").concat(d,".read(text, integer, integer) to postgres, service_role, anon, authenticated;\ngrant execute on function pgmq.read(text, integer, integer) to postgres, service_role, anon, authenticated;\n\n-- For the service role, we want full access\n-- Grant permissions on existing tables\ngrant all privileges on all tables in schema pgmq to postgres, service_role;\n\n-- Ensure service_role has permissions on future tables\nalter default privileges in schema pgmq grant all privileges on tables to postgres, service_role;\n\ngrant usage on schema pgmq to postgres, anon, authenticated, service_role;\n\n\n/*\n  Grant access to sequences to API roles by default. Existing table permissions\n  continue to enforce insert restrictions. This is necessary to accommodate the\n  on-backup hook that rebuild queue table primary keys to avoid a pg_dump segfault.\n  This can be removed once logical backups are completely retired.\n*/\ngrant usage, select, update\non all sequences in schema pgmq\nto anon, authenticated, service_role;\n\nalter default privileges in schema pgmq\ngrant usage, select, update\non sequences\nto anon, authenticated, service_role;\n")),p=s()("\n  drop function if exists \n    ".concat(d,".pop(queue_name text),\n    ").concat(d,".send(queue_name text, message jsonb, sleep_seconds integer),\n    ").concat(d,".send_batch(queue_name text, message jsonb[], sleep_seconds integer),\n    ").concat(d,".archive(queue_name text, message_id bigint),\n    ").concat(d,".delete(queue_name text, message_id bigint),\n    ").concat(d,".read(queue_name text, sleep integer, n integer)\n  ;\n\n  -- Revoke execute permissions on inner pgmq functions to roles (inverse of enabling)\n  do $$\n  begin\n      if exists (select 1 from pg_namespace where nspname = 'pgmq') then\n          -- Revoke privileges on the schema itself\n          revoke all on schema pgmq from anon, authenticated, service_role;\n          \n          -- Revoke default privileges for future objects\n          alter default privileges in schema pgmq revoke all on tables from anon, authenticated, service_role;\n          alter default privileges in schema pgmq revoke all on sequences from anon, authenticated, service_role;\n          alter default privileges in schema pgmq revoke all on functions from anon, authenticated, service_role;\n      end if;\n  end $$;\n\n  drop schema if exists ").concat(d,";\n"));async function f(e){let{projectRef:n,connectionString:t,enable:a}=e,{result:r}=await (0,l.R)({projectRef:n,connectionString:t,sql:a?m:p,queryKey:["toggle-queues-exposure"]});return r}let g=function(){let{onSuccess:e,onError:n,...t}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},i=(0,a.NL)();return(0,r.D)(e=>f(e),{async onSuccess(n,t,a){let{projectRef:r}=t;await i.invalidateQueries(c.a.exposePostgrestStatus(r)),i.invalidateQueries(u.A.schemas(r)),await (null==e?void 0:e(n,t,a))},async onError(e,t,a){void 0===n?o.Am.error("Failed to toggle queue exposure via PostgREST: ".concat(e.message)):n(e,t,a)},...t})}},94198:function(e,n,t){t.d(n,{a:function(){return a}});let a={create:()=>["queues","create"],delete:e=>["queues",e,"delete"],purge:e=>["queues",e,"purge"],getMessagesInfinite:(e,n,t)=>["projects",e,"queue-messages",n,t].filter(Boolean),list:e=>["projects",e,"queues"],metrics:(e,n)=>["projects",e,"queue-metrics",n],exposePostgrestStatus:e=>["projects",e,"queue-expose-status"]}},68820:function(e,n,t){t.d(n,{Q:function(){return a}});let a={tableEditor:(e,n)=>["projects",e,"table-editor",n]}},69200:function(e,n,t){t.d(n,{IV:function(){return l},nq:function(){return u},iB:function(){return c}});var a=t(28894),r=t(89089),o=t(68820),i=t(15538),s=t.n(i);async function l(e,n){var t,a;let{projectRef:o,connectionString:i,id:l}=e;if(!l)throw Error("id is required");let c=l?s()("\n    with base_table_info as (\n        select \n            c.oid::int8 as id,\n            nc.nspname as schema,\n            c.relname as name,\n            c.relkind,\n            c.relrowsecurity as rls_enabled,\n            c.relforcerowsecurity as rls_forced,\n            c.relreplident,\n            c.relowner,\n            obj_description(c.oid) as comment\n        from pg_class c\n        join pg_namespace nc on nc.oid = c.relnamespace\n        where c.oid = ".concat(l,"\n            and not pg_is_other_temp_schema(nc.oid)\n            and (\n                pg_has_role(c.relowner, 'USAGE')\n                or has_table_privilege(\n                    c.oid,\n                    'SELECT, INSERT, UPDATE, DELETE, TRUNCATE, REFERENCES, TRIGGER'\n                )\n                or has_any_column_privilege(c.oid, 'SELECT, INSERT, UPDATE, REFERENCES')\n            )\n    ),\n    table_stats as (\n        select \n            b.id,\n            case\n                when b.relreplident = 'd' then 'DEFAULT'\n                when b.relreplident = 'i' then 'INDEX'\n                when b.relreplident = 'f' then 'FULL'\n                else 'NOTHING'\n            end as replica_identity,\n            pg_total_relation_size(format('%I.%I', b.schema, b.name))::int8 as bytes,\n            pg_size_pretty(pg_total_relation_size(format('%I.%I', b.schema, b.name))) as size,\n            pg_stat_get_live_tuples(b.id) as live_rows_estimate,\n            pg_stat_get_dead_tuples(b.id) as dead_rows_estimate\n        from base_table_info b\n        where b.relkind in ('r', 'p')\n    ),\n    primary_keys as (\n        select \n            i.indrelid as table_id,\n            jsonb_agg(jsonb_build_object(\n                'schema', n.nspname,\n                'table_name', c.relname,\n                'table_id', i.indrelid::int8,\n                'name', a.attname\n            )) as primary_keys\n        from pg_index i\n        join pg_class c on i.indrelid = c.oid\n        join pg_attribute a on (a.attrelid = c.oid and a.attnum = any(i.indkey))\n        join pg_namespace n on c.relnamespace = n.oid\n        where i.indisprimary\n        group by i.indrelid\n    ),\n    relationships as (\n        select \n            c.conrelid as source_id,\n            c.confrelid as target_id,\n            jsonb_build_object(\n                'id', c.oid::int8,\n                'constraint_name', c.conname,\n                'deletion_action', c.confdeltype,\n                'update_action', c.confupdtype,\n                'source_schema', nsa.nspname,\n                'source_table_name', csa.relname,\n                'source_column_name', sa.attname,\n                'target_table_schema', nta.nspname,\n                'target_table_name', cta.relname,\n                'target_column_name', ta.attname\n            ) as rel_info\n        from pg_constraint c\n        join pg_class csa on c.conrelid = csa.oid\n        join pg_namespace nsa on csa.relnamespace = nsa.oid\n        join pg_attribute sa on (sa.attrelid = c.conrelid and sa.attnum = any(c.conkey))\n        join pg_class cta on c.confrelid = cta.oid\n        join pg_namespace nta on cta.relnamespace = nta.oid\n        join pg_attribute ta on (ta.attrelid = c.confrelid and ta.attnum = any(c.confkey))\n        where c.contype = 'f'\n    ),\n    columns as (\n        select \n            a.attrelid as table_id,\n            jsonb_agg(jsonb_build_object(\n                'id', (a.attrelid || '.' || a.attnum),\n                'table_id', c.oid::int8,\n                'schema', nc.nspname,\n                'table', c.relname,\n                'ordinal_position', a.attnum,\n                'name', a.attname,\n                'default_value', case \n                    when a.atthasdef then pg_get_expr(ad.adbin, ad.adrelid)\n                    else null\n                end,\n                'data_type', case \n                    when t.typtype = 'd' then \n                        case \n                            when bt.typelem <> 0::oid and bt.typlen = -1 then 'ARRAY'\n                            when nbt.nspname = 'pg_catalog' then format_type(t.typbasetype, null)\n                            else 'USER-DEFINED'\n                        end\n                    else \n                        case \n                            when t.typelem <> 0::oid and t.typlen = -1 then 'ARRAY'\n                            when nt.nspname = 'pg_catalog' then format_type(a.atttypid, null)\n                            else 'USER-DEFINED'\n                        end\n                end,\n                'format', case\n                    when t.typtype = 'e' then\n                        case\n                            when nt.nspname <> 'public' then concat(nt.nspname, '.', coalesce(bt.typname, t.typname))\n                            else coalesce(bt.typname, t.typname)\n                        end\n                    else\n                        coalesce(bt.typname, t.typname)\n                end,\n                'is_identity', a.attidentity in ('a', 'd'),\n                'identity_generation', case a.attidentity\n                    when 'a' then 'ALWAYS'\n                    when 'd' then 'BY DEFAULT'\n                    else null\n                end,\n                'is_generated', a.attgenerated in ('s'),\n                'is_nullable', not (a.attnotnull or t.typtype = 'd' and t.typnotnull),\n                'is_updatable', (\n                    b.relkind in ('r', 'p') or \n                    (b.relkind in ('v', 'f') and pg_column_is_updatable(b.id, a.attnum, false))\n                ),\n                'is_unique', uniques.table_id is not null,\n                'check', check_constraints.definition,\n                'comment', col_description(c.oid, a.attnum),\n                'enums', coalesce(\n                    (\n                        select jsonb_agg(e.enumlabel order by e.enumsortorder)\n                        from pg_catalog.pg_enum e\n                        where e.enumtypid = coalesce(bt.oid, t.oid)\n                            or e.enumtypid = coalesce(bt.typelem, t.typelem)\n                    ),\n                    '[]'::jsonb\n                )\n            ) order by a.attnum) as columns\n        from pg_attribute a\n        join base_table_info b on a.attrelid = b.id\n        join pg_class c on a.attrelid = c.oid\n        join pg_namespace nc on c.relnamespace = nc.oid\n        left join pg_attrdef ad on (a.attrelid = ad.adrelid and a.attnum = ad.adnum)\n        join pg_type t on a.atttypid = t.oid\n        join pg_namespace nt on t.typnamespace = nt.oid\n        left join pg_type bt on (t.typtype = 'd' and t.typbasetype = bt.oid)\n        left join pg_namespace nbt on bt.typnamespace = nbt.oid\n        left join (\n            select \n                conrelid as table_id,\n                conkey[1] as ordinal_position\n            from pg_catalog.pg_constraint\n            where contype = 'u' and cardinality(conkey) = 1\n        ) as uniques on uniques.table_id = a.attrelid and uniques.ordinal_position = a.attnum\n        left join (\n            select distinct on (conrelid, conkey[1])\n                conrelid as table_id,\n                conkey[1] as ordinal_position,\n                substring(\n                    pg_get_constraintdef(oid, true),\n                    8,\n                    length(pg_get_constraintdef(oid, true)) - 8\n                ) as definition\n            from pg_constraint\n            where contype = 'c' and cardinality(conkey) = 1\n            order by conrelid, conkey[1], oid asc\n        ) as check_constraints on check_constraints.table_id = a.attrelid \n                            and check_constraints.ordinal_position = a.attnum\n        where a.attnum > 0 \n        and not a.attisdropped\n        group by a.attrelid\n    )\n    select \n        case b.relkind\n            when 'r' then jsonb_build_object(\n                'entity_type', b.relkind,\n                'id', b.id,\n                'schema', b.schema,\n                'name', b.name,\n                'rls_enabled', b.rls_enabled,\n                'rls_forced', b.rls_forced,\n                'replica_identity', ts.replica_identity,\n                'bytes', ts.bytes,\n                'size', ts.size,\n                'live_rows_estimate', ts.live_rows_estimate,\n                'dead_rows_estimate', ts.dead_rows_estimate,\n                'comment', b.comment,\n                'primary_keys', coalesce(pk.primary_keys, '[]'::jsonb),\n                'relationships', coalesce(\n                    (select jsonb_agg(r.rel_info)\n                    from relationships r\n                    where r.source_id = b.id or r.target_id = b.id), \n                    '[]'::jsonb\n                ),\n                'columns', coalesce(c.columns, '[]'::jsonb)\n            )\n            when 'p' then jsonb_build_object(\n                'entity_type', b.relkind,\n                'id', b.id,\n                'schema', b.schema,\n                'name', b.name,\n                'rls_enabled', b.rls_enabled,\n                'rls_forced', b.rls_forced,\n                'replica_identity', ts.replica_identity,\n                'bytes', ts.bytes,\n                'size', ts.size,\n                'live_rows_estimate', ts.live_rows_estimate,\n                'dead_rows_estimate', ts.dead_rows_estimate,\n                'comment', b.comment,\n                'primary_keys', coalesce(pk.primary_keys, '[]'::jsonb),\n                'relationships', coalesce(\n                    (select jsonb_agg(r.rel_info)\n                    from relationships r\n                    where r.source_id = b.id or r.target_id = b.id), \n                    '[]'::jsonb\n                ),\n                'columns', coalesce(c.columns, '[]'::jsonb)\n            )\n            when 'v' then jsonb_build_object(\n                'entity_type', b.relkind,\n                'id', b.id,\n                'schema', b.schema,\n                'name', b.name,\n                'is_updatable', (pg_relation_is_updatable(b.id, false) & 20) = 20,\n                'comment', b.comment,\n                'columns', coalesce(c.columns, '[]'::jsonb)\n            )\n            when 'm' then jsonb_build_object(\n                'entity_type', b.relkind,\n                'id', b.id,\n                'schema', b.schema,\n                'name', b.name,\n                'is_populated', true,\n                'comment', b.comment,\n                'columns', coalesce(c.columns, '[]'::jsonb)\n            )\n            when 'f' then jsonb_build_object(\n                'entity_type', b.relkind,\n                'id', b.id,\n                'schema', b.schema,\n                'name', b.name,\n                'comment', b.comment,\n                'columns', coalesce(c.columns, '[]'::jsonb)\n            )\n        end as entity\n    from base_table_info b\n    left join table_stats ts on b.id = ts.id\n    left join primary_keys pk on b.id = pk.table_id\n    left join columns c on b.id = c.table_id;\n  ")):"",{result:u}=await (0,r.R)({projectRef:o,connectionString:i,sql:c,queryKey:["table-editor",l]},n);return null!==(a=null===(t=u[0])||void 0===t?void 0:t.entity)&&void 0!==a?a:void 0}let c=function(e){let{projectRef:n,connectionString:t,id:r}=e,{enabled:i=!0,...s}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return(0,a.a)(o.Q.tableEditor(n,r),e=>{let{signal:a}=e;return l({projectRef:n,connectionString:t,id:r},a)},{enabled:i&&void 0!==n&&void 0!==r&&!isNaN(r),staleTime:3e5,...s})};function u(e,n){let{projectRef:t,connectionString:a,id:r}=n;return e.fetchQuery(o.Q.tableEditor(t,r),e=>{let{signal:n}=e;return l({projectRef:t,connectionString:a,id:r},n)})}},321:function(e,n,t){t.d(n,{D1:function(){return l},Du:function(){return i},GV:function(){return o},N3:function(){return r},z_:function(){return s}});var a=t(21599);function r(e){return(null==e?void 0:e.entity_type)===a.l.TABLE||(null==e?void 0:e.entity_type)===a.l.PARTITIONED_TABLE}function o(e){return(null==e?void 0:e.entity_type)===a.l.FOREIGN_TABLE}function i(e){return(null==e?void 0:e.entity_type)===a.l.VIEW}function s(e){return(null==e?void 0:e.entity_type)===a.l.MATERIALIZED_VIEW}function l(e){return i(e)||s(e)}},95029:function(e,n,t){t.d(n,{s:function(){return a}});let a={tableRows:function(e){let{table:n,...t}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return["projects",e,"table-rows",null==n?void 0:n.id,"rows",t]},tableRowsCount:function(e){let{table:n,...t}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return["projects",e,"table-rows",null==n?void 0:n.id,"count",t]},tableRowsAndCount:(e,n)=>["projects",e,"table-rows",n]}},42138:function(e,n,t){t.d(n,{Fi:function(){return p},HS:function(){return h}});var a=t(36457),r=t(28894),o=t(43260),i=t(86806),s=t(69200),l=t(92570),c=t(68757),u=t(89089),d=t(95029),m=t(93458);let p=5e4,f="\nCREATE OR REPLACE FUNCTION pg_temp.count_estimate(\n    query text\n) RETURNS integer LANGUAGE plpgsql AS $$\nDECLARE\n    plan jsonb;\nBEGIN\n    EXECUTE 'EXPLAIN (FORMAT JSON)' || query INTO plan;\n    RETURN plan->0->'Plan'->'Plan Rows';\nEND;\n$$;\n".trim(),g=e=>{var n,t,a;let{table:r,filters:i=[],enforceExactCount:s=!1}=e;if(!r)return"";if(s){let e=new o.Query().from(r.name,null!==(n=r.schema)&&void 0!==n?n:void 0).count();return i.filter(e=>e.value&&""!==e.value).forEach(n=>{let t=(0,m.q)(r,n);e=e.filter(n.column,n.operator,t)}),"select (".concat(e.toSql().slice(0,-1),"), false as is_estimate;")}{let e=new o.Query().from(r.name,null!==(t=r.schema)&&void 0!==t?t:void 0).select("*");i.filter(e=>e.value&&""!=e.value).forEach(n=>{let t=(0,m.q)(r,n);e=e.filter(n.column,n.operator,t)});let n=e.toSql(),s=new o.Query().from(r.name,null!==(a=r.schema)&&void 0!==a?a:void 0).count();i.filter(e=>e.value&&""!=e.value).forEach(e=>{let n=(0,m.q)(r,e);s=s.filter(e.column,e.operator,n)});let l=s.toSql().slice(0,-1);return"\n".concat(f,"\n\nwith approximation as (\n    select reltuples as estimate\n    from pg_class\n    where oid = ").concat(r.id,"\n)\nselect \n  case \n    when estimate = -1 then (select pg_temp.count_estimate('").concat(n.replaceAll("'","''"),"'))\n    when estimate > ").concat(p," then ").concat(i.length>0?"pg_temp.count_estimate('".concat(n.replaceAll("'","''"),"')"):"estimate","\n    else (").concat(l,")\n  end as count,\n  estimate = -1 or estimate > ").concat(p," as is_estimate\nfrom approximation;\n").trim()}};async function b(e,n){var t;let{queryClient:a,projectRef:r,connectionString:o,tableId:d,filters:m,impersonatedRole:p,enforceExactCount:f}=e,b=await (0,s.nq)(a,{projectRef:r,connectionString:o,id:d});if(!b)throw Error("Table not found");let h=(0,i.NK)(b),_=(0,l.Jh)(g({table:h,filters:m,enforceExactCount:f}),{projectRef:null!=r?r:"ref",role:p}),{result:y}=await (0,u.R)({projectRef:r,connectionString:o,sql:_,queryKey:["table-rows-count",h.id],isRoleImpersonationEnabled:(0,c.Gm)(p)},n);return{count:y[0].count,is_estimate:null!==(t=y[0].is_estimate)&&void 0!==t&&t}}let h=function(e){let{projectRef:n,connectionString:t,tableId:o,...i}=e,{enabled:s=!0,...l}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},c=(0,a.NL)();return(0,r.a)(d.s.tableRowsCount(n,{table:{id:o},...i}),e=>{let{signal:a}=e;return b({queryClient:c,projectRef:n,connectionString:t,tableId:o,...i},a)},{enabled:s&&void 0!==n&&void 0!==o,...l})}},76282:function(e,n,t){t.d(n,{KK:function(){return x},Ue:function(){return w},wF:function(){return y}});var a=t(36457),r=t(28894),o=t(54580),i=t(43260),s=t(1043),l=t(86806),c=t(69200),u=t(92570),d=t(68757),m=t(89089),p=t(95029),f=t(42138),g=t(93458);let b=e=>{var n;let t=e.columns.filter(e=>null==e?void 0:e.isPrimaryKey).map(e=>e.name);return 0!==t.length?t:[null===(n=e.columns[0])||void 0===n?void 0:n.name]};async function h(e){return new Promise(n=>setTimeout(n,e))}async function _(e){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3,t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:500;for(let r=0;r<=n;r++)try{return await e()}catch(e){if((null==e?void 0:e.status)===429&&r<n){var a;let n=null===(a=e.headers)||void 0===a?void 0:a.get("retry-after"),o=n?1e3*parseInt(n):t*Math.pow(2,r);await h(o);continue}throw e}}let y=async e=>{var n;let{projectRef:t,connectionString:a,table:r,filters:s=[],sorts:l=[],impersonatedRole:c,progressCallback:d}=e;if(o.Qy&&!a)return console.error("Connection string is required"),[];let p=[],y=new i.Query,v=r.columns.filter(e=>{var n;return(null!==(n=null==e?void 0:e.enum)&&void 0!==n?n:[]).length>0&&"array"===e.dataType.toLowerCase()}).map(e=>'"'.concat(e.name,'"::text[]')),x=y.from(r.name,null!==(n=r.schema)&&void 0!==n?n:void 0).select(v.length>0?"*,".concat(v.join(",")):"*");if(s.filter(e=>e.value&&""!==e.value).forEach(e=>{let n=(0,g.q)(r,e);x=x.filter(e.column,e.operator,n)}),0===l.length&&r.estimateRowCount<=f.Fi){let e=b(r);e.length>0&&e.forEach(e=>{x=x.order(r.name,e,!0,!0)})}else l.forEach(e=>{x=x.order(e.table,e.column,e.ascending,e.nullsFirst)});let w=-1;for(;;){let e=500*(w+=1),n=(w+1)*500-1,r=(0,u.Jh)(x.range(e,n).toSql(),{projectRef:t,role:c});try{let{result:e}=await _(async()=>(0,m.R)({projectRef:t,connectionString:a,sql:r}));if(p.push(...e),null==d||d(p.length),e.length<500)break;await h(500)}catch(e){throw Error("Error fetching table rows: ".concat(e instanceof Error?e.message:"Unknown error"))}}return p.filter(e=>1!==e[u.$y])};async function v(e,n){let{queryClient:t,projectRef:a,connectionString:r,tableId:o,impersonatedRole:i,filters:p,sorts:f,limit:g,page:b}=e,h=await (0,c.nq)(t,{projectRef:a,connectionString:r,id:o});if(!h)throw Error("Table not found");let _=(0,l.NK)(h),y=(0,u.Jh)((0,s.a8)({table:h,filters:p,sorts:f,limit:g,page:b}),{projectRef:null!=a?a:"ref",role:i}),{result:v}=await (0,m.R)({projectRef:a,connectionString:r,sql:y,queryKey:["table-rows",null==_?void 0:_.id],isRoleImpersonationEnabled:(0,d.Gm)(i)},n);return{rows:v.map((e,n)=>({idx:n,...e}))}}let x=function(e){let{projectRef:n,connectionString:t,tableId:o,...i}=e,{enabled:s=!0,...l}=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},c=(0,a.NL)();return(0,r.a)(p.s.tableRows(n,{table:{id:o},...i}),e=>{let{signal:a}=e;return v({queryClient:c,projectRef:n,connectionString:t,tableId:o,...i},a)},{enabled:s&&void 0!==n&&void 0!==o,...l})};function w(e,n){let{projectRef:t,connectionString:a,tableId:r,impersonatedRole:o,...i}=n;return e.fetchQuery(p.s.tableRows(t,{table:{id:r},...i}),n=>{let{signal:o}=n;return v({queryClient:e,projectRef:t,connectionString:a,tableId:r,...i},o)})}},93458:function(e,n,t){t.d(n,{h:function(){return i},q:function(){return o}});var a=t(80711),r=t(321);function o(e,n){let t=e.columns.find(e=>e.name==n.column);if(t&&(0,a.v3)(t.format)){let e=Number(n.value);if(!Number.isNaN(e)&&!(e>Number.MAX_SAFE_INTEGER))return Number(n.value)}return n.value}function i(e){let{table:n}=e;if(!(0,r.N3)(n))return{error:{message:"Only table rows can be updated or deleted"}};let t=n.primary_keys;return t&&0!=t.length?{primaryKeys:t.map(e=>e.name)}:{error:{message:"Please add a primary key column to your table to update or delete rows"}}}},22441:function(e,n,t){t.d(n,{x:function(){return i}});var a=t(68335),r=t(82943),o=t(52983);function i(){let{replace:e=!0,arrayKeys:n=[]}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=JSON.stringify(n),i=(0,o.useMemo)(()=>new Set(n),[t]),s=(0,r.useRouter)(),l=(0,o.useMemo)(()=>Object.fromEntries(Object.entries(s.query).map(e=>{let[n,t]=e;return i.has(n)?Array.isArray(t)?[n,t]:[n,[t]]:[n,t]})),[i,s.query]),c=(0,a.Z)(l);return[l,(0,o.useCallback)(n=>{let t=c.current,a="function"==typeof n?n(t):n,r=Object.fromEntries(Object.entries({...t,...a}).filter(e=>{let[,n]=e;return!!n}));(e?s.replace:s.push)({pathname:s.pathname,query:r},void 0,{shallow:!0,scroll:!1})},[s,e])]}},38282:function(e,n,t){t.d(n,{T:function(){return r},s:function(){return a}});let a=["auth","cron","extensions","information_schema","net","pgsodium","pgsodium_masks","pgbouncer","pgtle","realtime","storage","supabase_functions","supabase_migrations","vault","graphql","graphql_public",t(84789).LW],r=a.filter(e=>"extensions"!==e)},49097:function(e,n,t){t.d(n,{b:function(){return u}});var a=t(97458),r=t(52983),o=t(49613),i=t(94997),s=t(8607),l=t(38282),c=t(77070);let u=e=>{let{visible:n,onClose:t}=e;return(0,a.jsx)(o.Z,{size:"medium",visible:n,header:"Schemas managed by Supabase",customFooter:(0,a.jsx)("div",{className:"flex items-center justify-end space-x-2",children:(0,a.jsx)(i.z,{type:"default",onClick:()=>t(),children:"Understood"})}),onCancel:()=>t(),"data-sentry-element":"Modal","data-sentry-component":"ProtectedSchemaModal","data-sentry-source-file":"ProtectedSchemaWarning.tsx",children:(0,a.jsxs)(o.Z.Content,{className:"space-y-2","data-sentry-element":"unknown","data-sentry-source-file":"ProtectedSchemaWarning.tsx",children:[(0,a.jsx)("p",{className:"text-sm",children:"The following schemas are managed by Supabase and are currently protected from write access through the dashboard."}),(0,a.jsx)("div",{className:"flex flex-wrap gap-1",children:l.s.map(e=>(0,a.jsx)("code",{className:"text-xs",children:e},e))}),(0,a.jsx)("p",{className:"text-sm !mt-4",children:"These schemas are critical to the functionality of your Supabase project and hence we highly recommend not altering them."}),(0,a.jsx)("p",{className:"text-sm",children:"You can, however, still interact with those schemas through the SQL Editor although we advise you only do so if you know what you are doing."})]})})};n.Z=e=>{let{schema:n,entity:t}=e,[o,l]=(0,r.useState)(!1);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(s.bZ,{"data-sentry-element":"Alert_Shadcn_","data-sentry-source-file":"ProtectedSchemaWarning.tsx",children:[(0,a.jsx)(c.Z,{strokeWidth:2,"data-sentry-element":"AlertCircle","data-sentry-source-file":"ProtectedSchemaWarning.tsx"}),(0,a.jsxs)(s.Cd,{"data-sentry-element":"AlertTitle_Shadcn_","data-sentry-source-file":"ProtectedSchemaWarning.tsx",children:["Currently viewing ",t," from a protected schema"]}),(0,a.jsxs)(s.X,{"data-sentry-element":"AlertDescription_Shadcn_","data-sentry-source-file":"ProtectedSchemaWarning.tsx",children:[(0,a.jsxs)("p",{className:"mb-2",children:["The ",(0,a.jsx)("code",{className:"text-xs",children:n})," schema is managed by Supabase and is read-only through the dashboard."]}),(0,a.jsx)(i.z,{type:"default",size:"tiny",onClick:()=>l(!0),"data-sentry-element":"Button","data-sentry-source-file":"ProtectedSchemaWarning.tsx",children:"Learn more"})]})]}),(0,a.jsx)(u,{visible:o,onClose:()=>l(!1),"data-sentry-element":"ProtectedSchemaModal","data-sentry-source-file":"ProtectedSchemaWarning.tsx"})]})}},85178:function(e,n,t){var a=t(97458),r=t(36030),o=t(61802),i=t(89462),s=t.n(i),l=t(94997);n.Z=e=>{let{title:n="",size:t="medium",children:i,ctaButtonLabel:c="",infoButtonLabel:u="",infoButtonUrl:d="",onClickCta:m=()=>{},loading:p=!1,disabled:f=!1,disabledMessage:g="",ctaUrl:b}=e,h=c&&m||d&&u;return(0,a.jsx)("div",{className:"flex h-full w-full items-center justify-center","data-sentry-component":"ProductEmptyState","data-sentry-source-file":"ProductEmptyState.tsx",children:(0,a.jsx)("div",{className:"flex space-x-4 rounded border bg-surface-100 p-6 shadow-md",children:(0,a.jsx)("div",{className:"flex flex-col",children:(0,a.jsxs)("div",{className:"".concat("medium"===t?"w-80":"w-[400px]"," space-y-4"),children:[(0,a.jsx)("h5",{className:"text-foreground",children:n}),(0,a.jsx)("div",{className:"flex flex-col space-y-2 text-foreground-light",children:i}),h&&(0,a.jsxs)("div",{className:"flex items-center space-x-2",children:[c&&b?(0,a.jsx)(l.z,{asChild:!0,type:"primary",children:(0,a.jsx)(s(),{href:b,children:c})}):c&&m?(0,a.jsx)(o.u,{type:"primary",onClick:m,loading:p,disabled:p||f,tooltip:{content:{side:"bottom",text:f&&g.length>0?g:void 0}},children:c}):null,d&&u?(0,a.jsx)(l.z,{type:"default",icon:(0,a.jsx)(r.Z,{strokeWidth:1.5}),children:(0,a.jsx)("a",{target:"_blank",rel:"noreferrer",href:d,children:u})}):null]})]})})})})}},48808:function(e,n,t){var a=t(97458),r=t(61401),o=t(87830),i=t(36030),s=t(89462),l=t.n(s),c=t(52983),u=t(94997);let d=(0,c.forwardRef)((e,n)=>{let{icon:t,title:s,description:d,url:m,urlLabel:p="Read more",defaultVisibility:f=!1,hideCollapse:g=!1,button:b,className:h="",block:_=!1}=e,[y,v]=(0,c.useState)(f);return(0,a.jsx)("div",{ref:n,role:"alert",className:"".concat(_?"block w-full":"","\n      block w-full rounded-md border bg-surface-300/25 py-3 ").concat(h),children:(0,a.jsxs)("div",{className:"flex flex-col px-4",children:[(0,a.jsxs)("div",{className:"flex items-center justify-between",children:[(0,a.jsxs)("div",{className:"flex w-full space-x-3 items-center",children:[t&&(0,a.jsx)("span",{className:"text-foreground-lighter",children:t}),(0,a.jsx)("div",{className:"flex-grow",children:(0,a.jsx)("h5",{className:"text-sm text-foreground",children:s})})]}),d&&!g?(0,a.jsx)("div",{className:"cursor-pointer text-foreground-lighter",onClick:()=>v(!y),children:y?(0,a.jsx)(r.Z,{size:14,strokeWidth:1.5}):(0,a.jsx)(o.Z,{size:14,strokeWidth:1.5})}):null]}),(d||m||b)&&(0,a.jsxs)("div",{className:"flex flex-col space-y-3 overflow-hidden transition-all ".concat(y?"mt-3":""),style:{maxHeight:y?500:0},children:[(0,a.jsx)("div",{className:"text-foreground-light text-sm",children:d}),m&&(0,a.jsx)("div",{children:(0,a.jsx)(u.z,{asChild:!0,type:"default",icon:(0,a.jsx)(i.Z,{}),children:(0,a.jsx)(l(),{href:m,target:"_blank",rel:"noreferrer",children:p})})}),b&&(0,a.jsx)("div",{children:b})]})]})})});d.displayName="InformationBox",n.Z=d},67719:function(e,n,t){t.d(n,{Sf:function(){return b},xg:function(){return f},yF:function(){return g}});var a=t(97458),r=t(36457),o=t(82943),i=t(52983),s=t(86806),l=t(41888),c=t(69200),u=t(76282),d=t(68757),m=t(98774),p=t(26915);function f(e){let{queryClient:n,projectRef:t,connectionString:a,id:r,sorts:o,filters:i,impersonatedRole:l}=e;return(0,c.nq)(n,{projectRef:t,connectionString:a,id:r}).then(e=>{if(e){var c;let d=(0,s.NK)(e),{sorts:p=[],filters:f=[]}=null!==(c=(0,s.r4)(t,e.name,e.schema))&&void 0!==c?c:{};(0,u.Ue)(n,{projectRef:t,connectionString:a,tableId:r,sorts:null!=o?o:(0,s.rg)(d.name,p),filters:null!=i?i:(0,s.Yb)(f),page:1,limit:m.Re,impersonatedRole:l})}})}function g(){let e=(0,o.useRouter)(),n=(0,r.NL)(),{project:t}=(0,l.d2)(),a=(0,d.fN)();return(0,i.useCallback)(r=>{let{id:o,filters:i,sorts:s}=r,l=o?Number(o):void 0;!t||!l||isNaN(l)||(e.prefetch("/project/".concat(t.ref,"/editor/").concat(l)),f({queryClient:n,projectRef:t.ref,connectionString:t.connectionString,id:l,sorts:s,filters:i,impersonatedRole:a.role}).catch(()=>{}))},[t,n,a.role,e])}function b(e){let{projectRef:n,id:t,sorts:r,filters:o,href:i,children:s,...l}=e,c=g();return(0,a.jsx)(p.Z,{href:i||"/project/".concat(n,"/editor/").concat(t),prefetcher:()=>c({id:t,sorts:r,filters:o}),...l,"data-sentry-element":"PrefetchableLink","data-sentry-component":"EditorTablePageLink","data-sentry-source-file":"project.$ref.editor.$id.tsx",children:s})}},1043:function(e,n,t){t.d(n,{a8:function(){return u},iO:function(){return i},no:function(){return o}});var a=t(79755),r=t(65702);let o=10240,i=50,s=new Set(["text","varchar","char","character varying","character","json","jsonb","bytea","xml","hstore","clob","vector","geometry","geography","tsvector","tsquery","daterange","tsrange","tstzrange","numrange","int4range","int8range","cube","ltree","lquery","jsonpath","citext"]),l=e=>{var n;let t=null===(n=e.primary_keys)||void 0===n?void 0:n.map(e=>e.name);return t&&t.length>0?t:e.columns&&e.columns.length>0?[e.columns[0].name]:[]},c=e=>s.has(e.toLowerCase()),u=e=>{let{table:n,filters:t=[],sorts:s=[],page:u,limit:d,maxCharacters:m=o,maxArraySize:p=i}=e;if(!n||!n.columns)return"";let f=new r.A,g=n.columns.sort((e,n)=>e.ordinal_position-n.ordinal_position).map(e=>e.name),b=n.columns.filter(e=>c(e.format)).map(e=>e.name),h=g.map(e=>{let n=(0,a.yR)(e);return b.includes(e)?"case\n        when octet_length(".concat(n,"::text) > ").concat(m," \n        then left(").concat(n,"::text, ").concat(m,") || '...'\n        else ").concat(n,"::text\n      end as ").concat(n):n});n.columns.filter(e=>"array"===e.data_type.toLowerCase()).map(e=>e.name).forEach(e=>{let n=h.findIndex(n=>n===(0,a.yR)(e));n>=0&&(h[n]="\n        case \n          when octet_length(".concat((0,a.yR)(e),"::text) > ").concat(m," \n          then (select array_cat(").concat((0,a.yR)(e),"[1:").concat(p,"]::text[], array['...']))::text[]\n          else ").concat((0,a.yR)(e),"::text[]\n        end\n      "))});let _=h.join(","),y=f.from(n.name,n.schema).select(_);t.forEach(e=>{y=y.filter(e.column,e.operator,e.value)});let v=n.live_rows_estimate||0;if(0===s.length&&v<=1e5&&n.columns.length>0){let e=l(n);e.length>0&&e.forEach(e=>{y=y.order(n.name,e,!0,!0)})}else s.forEach(e=>{y=y.order(e.table,e.column,e.ascending,e.nullsFirst)});let{from:x,to:w}=function(e){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:100,t=e?e*n:0;return{from:t,to:e?t+n-1:n-1}}((null!=u?u:1)-1,d);return y.range(x,w).toSql()}}}]);